//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: graphpipe

package graphpipe

import "github.com/google/flatbuffers/go"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Client API for GraphpipeService service
type GraphpipeServiceClient interface{
  Infer(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* InferResponse, error)  
  Metadata(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* MetadataResponse, error)  
}

type graphpipeServiceClient struct {
  cc *grpc.ClientConn
}

func NewGraphpipeServiceClient(cc *grpc.ClientConn) GraphpipeServiceClient {
  return &graphpipeServiceClient{cc}
}

func (c *graphpipeServiceClient) Infer(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* InferResponse, error) {
  out := new(InferResponse)
  err := grpc.Invoke(ctx, "/graphpipe.GraphpipeService/Infer", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *graphpipeServiceClient) Metadata(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* MetadataResponse, error) {
  out := new(MetadataResponse)
  err := grpc.Invoke(ctx, "/graphpipe.GraphpipeService/Metadata", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for GraphpipeService service
type GraphpipeServiceServer interface {
  Infer(context.Context, *InferRequest) (*flatbuffers.Builder, error)  
  Metadata(context.Context, *MetadataRequest) (*flatbuffers.Builder, error)  
}

func RegisterGraphpipeServiceServer(s *grpc.Server, srv GraphpipeServiceServer) {
  s.RegisterService(&_GraphpipeService_serviceDesc, srv)
}

func _GraphpipeService_Infer_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(InferRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(GraphpipeServiceServer).Infer(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/graphpipe.GraphpipeService/Infer",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(GraphpipeServiceServer).Infer(ctx, req.(* InferRequest))
  }
  return interceptor(ctx, in, info, handler)
}


func _GraphpipeService_Metadata_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(MetadataRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(GraphpipeServiceServer).Metadata(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/graphpipe.GraphpipeService/Metadata",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(GraphpipeServiceServer).Metadata(ctx, req.(* MetadataRequest))
  }
  return interceptor(ctx, in, info, handler)
}


var _GraphpipeService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "graphpipe.GraphpipeService",
  HandlerType: (*GraphpipeServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Infer",
      Handler: _GraphpipeService_Infer_Handler, 
    },
    {
      MethodName: "Metadata",
      Handler: _GraphpipeService_Metadata_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

